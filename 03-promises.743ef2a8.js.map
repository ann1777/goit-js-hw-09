{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAMA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,OAAIN,EACKI,EAAQ,CAAEN,WAAUC,cAEpBM,EAAO,CAAEP,WAAUC,a,GAE3BA,E,IAbQQ,SAASC,cAAc,SAE/BC,iBAAiB,UAexB,SAA+BC,GAC7BA,EAAEC,iBAEF,IAAMC,EAASF,EAAEG,OAAOC,SAExB,GAAIF,EAAOG,MAAMC,MAAQ,GAAKJ,EAAOK,OAAOD,OAAS,GAAKJ,EAAOM,KAAKF,MAAQ,EAE5E,YADArB,EAAAwB,OAAOC,QAAQ,qGAUjB,IANA,IAAMC,EAAaC,OAAOV,EAAOG,MAAMC,OACjCO,EAAYD,OAAOV,EAAOM,KAAKF,OAC/BQ,EAAcF,OAAOV,EAAOK,OAAOD,OACrCS,EAAe,EACfC,EAAe,EAEVC,EAAW,EAAGA,EAAWH,EAAaG,GAAY,EAAG,CAC5D,IAAIC,EAAYP,EAAaE,EAAYI,EACzCE,QAAQC,IAAIF,GAEZ/B,EAAc8B,EAAS,EAAGC,GACvBG,MAAK,SAAAC,G,IAAGlC,EAAQkC,EAARlC,SAAUC,EAASiC,EAATjC,UACfJ,EAAAwB,OAAOc,QAAQ,uBAAwCC,OAAfpC,EAAS,QAAgBoC,OAAVnC,EAAU,OAC/D0B,GAA4B,EAC9BI,QAAQC,IAAI,aAA0BI,OAAbT,EAAa,a,IAEzCU,OAAM,SAAAH,G,IAAGlC,EAAQkC,EAARlC,SAAUC,EAASiC,EAATjC,UAChBJ,EAAAwB,OAAOiB,QAAQ,sBAAuCF,OAAfpC,EAAS,QAAgBoC,OAAVnC,EAAU,OAC9D2B,GAA4B,EAC9BG,QAAQC,IAAI,WAAwBI,OAAbR,EAAa,a,IAEvCC,IAAaH,EAAc,GAAGlB,YAAW,WAC1CX,EAAAwB,OAAOc,QAAQ,qBAA+DC,OAAxCT,EAAa,6BAAwCS,OAAbR,EAAa,Y,GACxFE,EAAU,I","sources":["src/js/03-promises.js"],"sourcesContent":["import {Notify} from 'notiflix';\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', onCreatePromisesClick);\n\nfunction createPromise(position, stepDelay) {\n  const shouldResolve = Math.random() > 0.5;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        return resolve({ position, stepDelay });\n      } else {\n        return reject({ position, stepDelay });\n      }\n    }, stepDelay)\n});\n}\n\nfunction onCreatePromisesClick(e) {\n  e.preventDefault();\n\n  const formEl = e.target.elements;\n\n  if (formEl.delay.value < 0 || formEl.amount.value <= 0 || formEl.step.value < 0) {\n    Notify.warning(\"Delay step and amount values must be positive numbers and the amount value must be more than zero\");\n    return;\n} \n \n  const firstDelay = Number(formEl.delay.value);\n  const delayStep = Number(formEl.step.value);\n  const inputAmount = Number(formEl.amount.value);\n  let countSuccess = 0;\n  let countFailure = 0;\n\n  for (let position = 0; position < inputAmount; position += 1) {\n    let stepDelay = firstDelay + delayStep * position;\n    console.log(stepDelay);\n    \n    createPromise(position+1, stepDelay)\n      .then(({ position, stepDelay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${stepDelay}ms`);\n          countSuccess = countSuccess + 1;\n          console.log(`Succeded: ${countSuccess} promises`);\n    })\n      .catch(({ position, stepDelay }) => {    \n          Notify.failure(`❌ Rejected promise ${position} in ${stepDelay}ms`);\n          countFailure = countFailure + 1;\n          console.log(`Failed: ${countFailure} promises`);\n    })\n    if(position === inputAmount - 1) setTimeout(() => {\n      Notify.success(`TOTAL: ✅ Succided ${countSuccess} promises and ❌ Rejected ${countFailure} promise`);\n    }, stepDelay+5000)\n  } \n}\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","stepDelay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","formEl1","target","elements","delay","value","amount","step","Notify","warning","firstDelay","Number","delayStep","inputAmount","countSuccess","countFailure","position1","stepDelay1","console","log","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.743ef2a8.js.map"}